x = int(input("entrer un entier:" ))

print (" vous avez tappez : ", x)
if x < 0:
  x = 0
  print('negative changé en zerro')
elif x == 0:
  print('zero')
elif x == 1:
  print('single')  
else:
  print('more')





words = ['cat', 'window', 'defenestrate']

for i in words:
  print(i, len(i))




words = ['cat', 'window', 'defenestrate', 'this is a test']

for w in words[:]:
  if len(w) > 6:
    words.insert(0, w)

print (words)



words = ['cat', 'window', 'defenestrate', 'this is a test']

for w in words[:]:
  if len(w) > 6:
    words.insert(0, w)

print (words)



for i in range(len(words)):
    print(i, words[i])



print(range(10))
print(list(range(5)))

for n in range(2, 10):
    for x in range(2, n):
        if n % x == 0:
            print(n, 'equals', x, '*', n//x)
            break
    else:
        print(n, 'is a prime number')


for num in range(2, 10):
    if num % 2 == 0:
        print("Found an even number", num)
        continue
    print("Found a number", num)


def fib(n):
  a, b = 0, 1
  while a < n:
    print(a, end=' ')
    a, b = b, a+b
  print()

fib(2000)  

f = fib
f(100)

fib(0)
print(fib(0))

def fib2(n):
    result = []
    a, b = 0, 1
    while a < n:
        result.append(a)  
        a, b = b, a+b
    return result

result = fib2(200)
print(result)
print(fib2(100))

def ask_ok(prompt, retries=4, reminder='Please try again!'):
    while True:
        ok = input(prompt)
        if ok in ('y', 'ye', 'yes'):
            return True
        if ok in ('n', 'no', 'nop', 'nope'):
            return False
        retries = retries - 1
        if retries < 0:
            raise ValueError('invalid user response')
        print(reminder)


print (ask_ok("put a number : "))

i = 5
i = 10
def f(arg=i):
    print(arg)

i = 6
f()


def f(a, L=[]):
    L.append(a)
    return L

print(f(1))
print(f(2))
print(f(3))

def f(a, L=None):
    if L is None:
        L = []
    L.append(a)
    return L

print(f(1))
print(f(2))
print(f(3))    

def parrot(voltage, state='a stiff', action='voom', type='Norwegian Blue'):
    print("-- This parrot wouldn't", action, end=' ')
    print("if you put", voltage, "volts through it.")
    print("-- Lovely plumage, the", type)
    print("-- It's", state, "!")

parrot(1000)                                          # 1 positional argument
parrot(voltage=1000)                                  # 1 keyword argument
parrot(voltage=1000000, action='VOOOOOM')             # 2 keyword arguments
parrot(action='VOOOOOM', voltage=1000000)             # 2 keyword arguments
parrot('a million', 'bereft of life', 'jump')         # 3 positional arguments
parrot('a thousand', state='pushing up the daisies')  # 1 positional, 1 keyword


def cheeseshop(kind, *arguments, **keywords):
    print("-- Do you have any", kind, "?")
    print("-- I'm sorry, we're all out of", kind)
    for arg in arguments:
        print(arg)
    print("-" * 40)
    keys = sorted(keywords.keys())
    for kw in keys:
        print(kw, ":", keywords[kw])

cheeseshop("Limburger", "It's very runny, sir.",
           "It's really very, VERY runny, sir.",
           shopkeeper="Michael Palin",
           client="John Cleese",
           sketch="Cheese Shop Sketch")


def concat(*args, sep="/"):
    return sep.join(args)


print(concat("earth", "mars","venus"))

print(concat("earth", "mars","venus", sep="****"))

print(list(range(3, 6)))            # normal call with separate arguments

args = [3, 6]
list(range(*args))            # call with arguments unpacked from a list


def parrot(voltage, state='a stiff', action='voom'):
    print("-- This parrot wouldn't", action, end=' ')
    print("if you put", voltage, "volts through it.", end=' ')
    print("E's", state, "!")

d = {"voltage": "four million", "state": "bleedin' demised", "action": "VOOM"}


parrot(**d)

def make_incrementor(n):
    return lambda x: x + n

f = make_incrementor(42)
print(f(0))

print(f(1))
print(make_incrementor(50)(5))

pairs = [(1, 'one'), (2, 'two'), (3, 'three'), (4, 'four')]

print(pairs)

pairs.sort(key=lambda pair: pair[1])
print(pairs)

def my_function():
    """Do nothing, but document it.

    No, really, it doesn't do anything.
    """
    pass

print(my_function.__doc__)

def f(ham: str, eggs: str = 'eggs') -> str:
    print("Annotations:", f.__annotations__)
    print("Arguments:", ham, eggs)
    return ham + ' and ' + eggs

f('spam')

